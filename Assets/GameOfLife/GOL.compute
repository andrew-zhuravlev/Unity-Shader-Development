#pragma kernel NextGeneration
#pragma kernel CopyTexture
#pragma kernel CreateTextureFromCells

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> FrontBuffer;
RWTexture2D<float4> BackBuffer;

// 0 = unpopulated cell, 1 - populated cell.
StructuredBuffer<int> CellsBuffer;
uint CellsBufferWidth;

float4 Alive;
float4 Dead;

bool IsInsideBounds(int2 id) {
	return id.x >= 0 && (uint)id.x < CellsBufferWidth && id.y >= 0 && (uint)id.y < CellsBufferWidth;
}

bool IsAlive(uint2 id) {
	return all(BackBuffer[id] == Alive);
}

uint GetAliveNeighbours(uint2 id) {
	uint result = 0;
	int2 checkid = int2(0,0);
	for (int row = -1; row <= 1; ++row) {
		checkid.x = id.x + row;
		for (int col = -1; col <= 1; ++col) {
			checkid.y = id.y + col;
			if (!(row == 0 && col == 0) && IsInsideBounds(checkid) && IsAlive(checkid))
				++result;
		}
	}
	return result;
}

// Each group have 64 threads, which can be accessed as a 2d array.
[numthreads(8,8,1)]
void NextGeneration (uint3 id : SV_DispatchThreadID) {
	
	uint aliveNeighbours = GetAliveNeighbours(id.xy);

	switch (aliveNeighbours) {
	case 0:
	case 1:
		FrontBuffer[id.xy] = Dead;
		break;
	case 2:
		FrontBuffer[id.xy] = IsAlive(id.xy) ? Alive : Dead;
		break;
	case 3:
		FrontBuffer[id.xy] = Alive;
		break;
	default:
		FrontBuffer[id.xy] = Dead;
		break;
	}
}

[numthreads(8,8,1)]
void CopyTexture (uint3 id : SV_DispatchThreadID) {
	BackBuffer[id.xy] = FrontBuffer[id.xy];
}

[numthreads(8,8,1)]
void CreateTextureFromCells (uint3 id : SV_DispatchThreadID) {
	BackBuffer[id.xy] = CellsBuffer[CellsBufferWidth * id.x + id.y] == 0 ? Dead : Alive;
}